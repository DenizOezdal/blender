/* SPDX-License-Identifier: Apache-2.0
 * Copyright 2011-2022 Blender Foundation */

#include "node_color.h"
#include "stdcycles.h"

vector environment_texture_direction_to_equirectangular(vector dir)
{
  float u = -atan2(dir[1], dir[0]) / (M_2PI) + 0.5;
  float v = atan2(dir[2], hypot(dir[0], dir[1])) / M_PI + 0.5;

  return vector(u, v, 0.0);
}

vector environment_texture_direction_to_mirrorball(vector idir)
{
  vector dir = idir;
  dir[1] -= 1.0;

  float div = 2.0 * sqrt(max(-0.5 * dir[1], 0.0));
  if (div > 0.0)
    dir /= div;

  float u = 0.5 * (dir[0] + 1.0);
  float v = 0.5 * (dir[2] + 1.0);

  return vector(u, v, 0.0);
}

void environment_texture_cubemap_xyz_to_uv(
    vector dir, output float u, output float v, output float max_axis, output int index)
{
  float abs_x = abs(dir.x);
  float abs_y = abs(dir.y);
  float abs_z = abs(dir.z);

  int is_x_positive = dir.x > 0.0 ? 1 : 0;
  int is_y_positive = dir.y > 0.0 ? 1 : 0;
  int is_z_positive = dir.z > 0.0 ? 1 : 0;

  if (is_x_positive && abs_x >= abs_y && abs_x >= abs_z) {
    max_axis = abs_x;
    u = dir.y;
    v = dir.z;
    index = 0;
    return;
  }
  if (!is_x_positive && abs_x >= abs_y && abs_x >= abs_z) {
    max_axis = abs_x;
    u = -dir.y;
    v = dir.z;
    index = 1;
    return;
  }
  if (is_y_positive && abs_y >= abs_x && abs_y >= abs_z) {
    max_axis = abs_y;
    u = -dir.x;
    v = dir.z;
    index = 2;
    return;
  }
  if (!is_y_positive && abs_y >= abs_x && abs_y >= abs_z) {
    max_axis = abs_y;
    u = dir.x;
    v = dir.z;
    index = 3;
    return;
  }
  if (is_z_positive && abs_z >= abs_x && abs_z >= abs_y) {
    max_axis = abs_z;
    u = dir.x;
    v = dir.y;
    index = 4;
    return;
  }
  if (!is_z_positive && abs_z >= abs_x && abs_z >= abs_y) {
    max_axis = abs_z;
    u = dir.x;
    v = dir.y;
    index = 5;
    return;
  }
}

vector environment_texture_cubemap_cross_horizontal(float uc, float vc, float max_axis, int index)
{
  float u = 0.125 * (uc / max_axis + 1.0);
  float v = 0.166667 * (vc / max_axis + 1.0);

  if (index == 0) {
    u += 0.5;
    v += 0.333333;
  }
  else if (index == 1) {
    v += 0.333333;
  }
  else if (index == 2) {
    u += 0.75;
    v += 0.333333;
  }
  else if (index == 3) {
    u += 0.25;
    v += 0.333333;
  }
  else if (index == 4) {
    u += 0.25;
    v += 0.666666;
  }
  else if (index == 5) {
    u += 0.25;
    v = 0.333333 - v;
  }

  return vector(u, v, 0.0);
}

vector environment_texture_cubemap_stripe_horizontal(float uc, float vc, float max_axis, int index)
{
  float u = 0.083333 * (uc / max_axis + 1.0);
  float v = 0.5 * (vc / max_axis + 1.0);

  if (index == 1)
    u += 0.166666;
  else if (index == 2)
    u += 0.166666 * 5;
  else if (index == 3)
    u += 0.166666 * 4;
  else if (index == 4)
    u += 0.166666 * 2;
  else if (index == 5) {
    u += 0.166666 * 3;
    v = 1.0 - v;
  }

  return vector(u, v, 0.0);
}

vector environment_texture_cubemap_stripe_vertical(float uc, float vc, float max_axis, int index)
{
  float u = 0.5 * (uc / max_axis + 1.0);
  float v = 0.083333 * (vc / max_axis + 1.0);

  if (index == 0)
    v += 0.166666 * 5;
  else if (index == 1)
    v += 0.166666 * 4;
  else if (index == 3)
    v += 0.166666;
  else if (index == 4)
    v += 0.166666 * 3;
  else if (index == 5)
    v = 0.166666 * 3 - v;

  return vector(u, v, 0.0);
}

vector environment_texture_direction_to_cubemap(vector dir, string cubemap_layout)
{
  float max_axis = 0.0;
  float uc = 0.0;
  float vc = 0.0;
  int index = -1;

  environment_texture_cubemap_xyz_to_uv(dir, uc, vc, max_axis, index);

  if (cubemap_layout == "cross_horizontal")
    return environment_texture_cubemap_cross_horizontal(uc, vc, max_axis, index);
  else if (cubemap_layout == "stripe_horizontal")
    return environment_texture_cubemap_stripe_horizontal(uc, vc, max_axis, index);
  else
    return environment_texture_cubemap_stripe_vertical(uc, vc, max_axis, index);
}

shader node_environment_texture(
    int use_mapping = 0,
    matrix mapping = matrix(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    vector Vector = P,
    string filename = "",
    string projection = "equirectangular",
    string cubemap_layout = "cross_horizontal",
    string interpolation = "linear",
    int compress_as_srgb = 0,
    int ignore_alpha = 0,
    int unassociate_alpha = 0,
    int is_float = 1,
    output color Color = 0.0,
    output float Alpha = 1.0)
{
  vector p = Vector;

  if (use_mapping)
    p = transform(mapping, p);

  p = normalize(p);

  if (projection == "equirectangular")
    p = environment_texture_direction_to_equirectangular(p);
  else if (projection == "mirror_ball")
    p = environment_texture_direction_to_mirrorball(p);
  else
    p = environment_texture_direction_to_cubemap(p, cubemap_layout);

  /* todo: use environment for better texture filtering of equirectangular */
  Color = (color)texture(
      filename, p[0], 1.0 - p[1], "wrap", "periodic", "interp", interpolation, "alpha", Alpha);

  if (ignore_alpha) {
    Alpha = 1.0;
  }
  else if (unassociate_alpha) {
    Color = color_unpremultiply(Color, Alpha);

    if (!is_float)
      Color = min(Color, 1.0);
  }

  if (compress_as_srgb)
    Color = color_srgb_to_scene_linear(Color);
}
