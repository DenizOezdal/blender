/* SPDX-License-Identifier: Apache-2.0
 * Copyright 2011-2022 Blender Foundation */

#include "node_color.h"
#include "stdcycles.h"

vector environment_texture_direction_to_equirectangular(vector dir)
{
  float u = -atan2(dir[1], dir[0]) / (M_2PI) + 0.5;
  float v = atan2(dir[2], hypot(dir[0], dir[1])) / M_PI + 0.5;

  return vector(u, v, 0.0);
}

vector environment_texture_direction_to_mirrorball(vector idir)
{
  vector dir = idir;
  dir[1] -= 1.0;

  float div = 2.0 * sqrt(max(-0.5 * dir[1], 0.0));
  if (div > 0.0)
    dir /= div;

  float u = 0.5 * (dir[0] + 1.0);
  float v = 0.5 * (dir[2] + 1.0);

  return vector(u, v, 0.0);
}

void environment_texture_cubemap_projection(vector dir, output float u, output float v, output float maxAxis, output int index) {
 // TODO credit copy & paste from wikipedia
  float absX = abs(dir.x);
  float absY = abs(dir.y);
  float absZ = abs(dir.z);
  
  int isXPositive = dir.x > 0 ? 1 : 0;
  int isYPositive = dir.y > 0 ? 1 : 0;
  int isZPositive = dir.z > 0 ? 1 : 0;

   // POSITIVE X
  if (isXPositive && absX >= absY && absX >= absZ) {
    maxAxis = absX;
    u = dir.y;
    v = dir.z;
    index = 0;
  }
  // NEGATIVE X
  if (!isXPositive && absX >= absY && absX >= absZ) {
    maxAxis = absX;
    u = -dir.y;
    v = dir.z;
    index = 1;
  }
  // POSITIVE Y
  if (isYPositive && absY >= absX && absY >= absZ) {
    maxAxis = absY;
    u = -dir.x;
    v = dir.z;
    index = 2;
  }
  // NEGATIVE Y
  if (!isYPositive && absY >= absX && absY >= absZ) {
    maxAxis = absY;
    u = dir.x;
    v = dir.z;
    index = 3;
  }
  // POSITIVE Z
  if (isZPositive && absZ >= absX && absZ >= absY) {
    maxAxis = absZ;
    u = dir.x;
    v = dir.y;
    index = 4;
  }
  // NEGATIVE Z
  if (!isZPositive && absZ >= absX && absZ >= absY) {
    maxAxis = absZ;
    u = dir.x;
    v = dir.y;
    index = 5;
  }
}

vector environment_texture_cubemap_cross_horizontal(float uc, float vc, float maxAxis, int index)
{
  // Convert u range from -1 to 1 to 0 to 0.25 (1/4) as the texture space is 4 faces wide
  float u = 0.125 * (uc / maxAxis + 1.0);
  // Convert v range from -1 to 1 to 0 to 0.333.. (1/3) as the texture space is 3 faces high
  float v = 0.166667 * (vc / maxAxis + 1.0);

  // Some coordinates are reordered to take Blender's internal transform system into account
  // while we offset the uv coordinate to the right face.
  if(index == 0) {
    u += 0.5;
    v += 0.333333;
  } else if (index == 1) {
    v += 0.333333;
  } else if (index == 2) {
    // -Z
    u += 0.75;
    v += 0.333333;
  } else if (index == 3) {
    // Z
    u += 0.25;
    v += 0.333333;
  } else if (index == 4) {
    // Y
    u += 0.25;
    v += 0.666666;
  } else if (index == 5) {
    // -Y
    u += 0.25;
    v = 0.333333 - v;
  }

   return vector(u, v, 0.0);
}

vector environment_texture_cubemap_stripe_horizontal(float uc, float vc, float maxAxis, int index)
{
  // Convert u range from -1 to 1 to 0 to 0.166667 (1/6) as the texture space is 6 faces wide
  float u = 0.083333 * (uc / maxAxis + 1.0);
  // Convert v range from -1 to 1 to 0 to 1 as the texture space is 1 face high
  float v = 0.5 * (vc / maxAxis + 1.0);

  // Some coordinates are reordered to take Blender's internal transform system into account
  // while we offset the uv coordinate to the right face.
  if (index == 1) {
    u += 0.166666;
  } else if (index == 2) {
    // -Z
    u += 0.166666 * 5;
  } else if (index == 3) {
    // Z
    u += 0.166666 * 4;
  } else if (index == 4) {
    // Y
    u += 0.166666 * 2;
  } else if (index == 5) {
    // -Y
    u += 0.166666 * 3;
  }

   return vector(u, v, 0.0);
}

vector environment_texture_cubemap_stripe_vertical(float uc, float vc, float maxAxis, int index) 
{
  // Convert v range from -1 to 1 to 0 to 1 as the texture space is 1 face high
  float u = 0.5 * (uc / maxAxis + 1.0);
  // Convert u range from -1 to 1 to 0 to 0.166667 (1/6) as the texture space is 6 faces high
  float v = 0.083333 * (vc / maxAxis + 1.0);

  // Some coordinates are reordered to take Blender's internal transform system into account
  // while we offset the uv coordinate to the right face.
  if (index == 1) {
    v += 0.166666;
  } else if (index == 2) {
    // -Z
    v += 0.166666 * 5;
  } else if (index == 3) {
    // Z
    v += 0.166666 * 4;
  } else if (index == 4) {
    // Y
    v += 0.166666 * 2;
  } else if (index == 5) {
    // -Y
    v += 0.166666 * 3;
  }

   return vector(u, 1.0-v, 0.0);
}

vector environment_texture_direction_to_cubemap(vector dir, string cubemap_layout)
{
  float maxAxis, uc, vc;
  int index = -1;

  environment_texture_cubemap_projection(dir, uc, vc, maxAxis, index);

  if (cubemap_layout == "cross_horizontal")
    return environment_texture_cubemap_cross_horizontal(uc, vc, maxAxis, index);
  else if (cubemap_layout == "stripe_horizontal")
    return environment_texture_cubemap_stripe_horizontal(uc, vc, maxAxis, index);
  else
    return environment_texture_cubemap_stripe_vertical(uc, vc, maxAxis, index);
}

shader node_environment_texture(
    int use_mapping = 0,
    matrix mapping = matrix(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
    vector Vector = P,
    string filename = "",
    string projection = "equirectangular",
    string cubemap_layout = "cross_horizontal",
    string interpolation = "linear",
    int compress_as_srgb = 0,
    int ignore_alpha = 0,
    int unassociate_alpha = 0,
    int is_float = 1,
    output color Color = 0.0,
    output float Alpha = 1.0)
{
  vector p = Vector;

  if (use_mapping)
    p = transform(mapping, p);

  p = normalize(p);

  if (projection == "equirectangular")
    p = environment_texture_direction_to_equirectangular(p);
  else if (projection == "mirror_ball")
    p = environment_texture_direction_to_mirrorball(p);
  else
    p = environment_texture_direction_to_cubemap(p, cubemap_layout);

  /* todo: use environment for better texture filtering of equirectangular */
  Color = (color)texture(
      filename, p[0], 1.0 - p[1], "wrap", "periodic", "interp", interpolation, "alpha", Alpha);

  if (ignore_alpha) {
    Alpha = 1.0;
  }
  else if (unassociate_alpha) {
    Color = color_unpremultiply(Color, Alpha);

    if (!is_float)
      Color = min(Color, 1.0);
  }

  if (compress_as_srgb)
    Color = color_srgb_to_scene_linear(Color);
}
